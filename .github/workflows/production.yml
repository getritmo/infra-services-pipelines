---
on:
  workflow_call:
    inputs:
      ACT_TESTING:
        required: false
        type: string
        default: "false"
      API_DOC_S3_BUCKET:
        required: true
        type: string
      CLOUDFRONT_DISTRIBUTION_API:
        required: false
        type: string
      CLOUDFRONT_DISTRIBUTION_STATICS:
        required: false
        type: string
      CLUSTER_INT:
        required: true
        type: string
      CLUSTER_PUB:
        required: true
        type: string
      CONTAINER_NAME:
        required: true
        type: string
      DEPLOY_PRO_BRANCH:
        default: "main"
        required: false
        type: string
      DOCKER_BUILD_PATH:
        required: false
        type: string
      DOC_PATH:
        required: true
        type: string
      ECR_REGISTRY:
        required: true
        type: string
      ENVIRONMENT:
        required: true
        type: string
      IMAGE_TAG:
        required: true
        type: string
      REPOSITORY_NAME:
        required: true
        type: string
      LOGBOOK_S3_BUCKET:
        required: false
        type: string
        default: "systems-production-logbook-bucket"
      SERVICE_NAME:
        required: true
        type: string
      SWAGGER:
        default: "true"
        required: false
        type: string
      SWAGGER_FILE:
        default: "./docs/swagger.yaml"
        required: false
        type: string
      STRING_TO_DELETE:
        default: 'getritmo\/'
        required: false
        type: string
      TESTING_REPO:
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      PRIVATE_REPO_ACCESS:
        required: true

name: Services Production

jobs:
  prepare:
    name: prepare
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    outputs:
      swagger: ${{ steps.swagger_files.outputs.swagger}}
      slack_thread: ${{ steps.slack.outputs.thread_ts }}
      slack_data: ${{ steps.slack_notify.outputs.slack-result }}
    steps:
      - name: Checkout SERVICE repo
        uses: actions/checkout@v2
        id: checkout_repo

      - name: Check if swagger file exists
        id: swagger_files
        run: |
          if test -f "${{ inputs.SWAGGER_FILE }}"; then
            echo "::set-output name=swagger::true"
          else
            echo "::set-output name=swagger::false"
          fi

      - name: Notify to Slack
        # using this github-action https://github.com/archive/github-actions-slack
        id: slack_notify
        uses: archive/github-actions-slack@master
        with:
          slack-channel: ${{ secrets.SLACK_BACKEND_PRO }}
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_APP_BENDER_TOKEN }}
          slack-text: "*Deploying* \n* - Repo:* ${{ github.repository }}\n* - Image SHA:* ${{ github.event.client_payload.slash_command.args.named.image_version }}\n* - Environment:* ${{ inputs.ENVIRONMENT }}\n* - By:* ${{ github.actor }}\n"

      - name: Check all outputs
        run: |
          echo "swagger mode > ${{ steps.swagger_files.outputs.swagger }}"

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    outputs:
      deployment_status: ${{ job.status }}
    steps:
      - name: Get Run ID
        id: get_run_id
        run: |
          echo "::set-output name=run_id::$(\
            gh run list \
              --workflow "${{ github.event.pull_request.base.ref == 'main' && 'service-staging.yml' }}" \
              --json conclusion,headSha,status,databaseId \
              --jq ".[] | select( .conclusion == \"success\" and .headSha == \"${{github.event.pull_request.base.sha}}\") | .databaseId" \
          )"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Download task-definition
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: service-staging.yml
          github_token: ${{ secrets.PRIVATE_REPO_ACCESS }}
          run_id: ${{steps.get_run_id.outputs.run_id}}
          # workflow_conclusion: success
          # branch: ${{ inputs.DEPLOY_PRO_BRANCH }}
          name: service_definition
          path: ./service_definition

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Generate task-definition.json
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./service_definition/${{ inputs.ENVIRONMENT }}/task-definition.json
          container-name: ${{ inputs.CONTAINER_NAME }}
          image: ${{ inputs.ECR_REGISTRY }}/${{ inputs.REPOSITORY_NAME }}:${{ inputs.MAIN_REPO_PREFIX}}${{ github.event.client_payload.slash_command.args.named.image_version }}

      # - name: Deploying ECS task on ECS cluster...
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ inputs.SERVICE_NAME }}
      #     cluster: ${{ inputs.CLUSTER_INT }}
      #     wait-for-service-stability: true

      - name: Save task-definition
        run: |
          mkdir -p ./tmp/taskdef
          cat ${{ steps.task-def.outputs.task-definition }} > ./tmp/taskdef/task-definition.json

      - name: Upload task definition
        id: upload-task-defition
        uses: actions/upload-artifact@v3
        with:
          name: task-definition
          path: ./tmp/taskdef/task-definition.json

  tag:
    name: tag release
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    needs: [deploy]
    outputs:
      release-tag: ${{ steps.tag-release.outputs.tag }}
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d-%H%M%S')"

      - name: Checkout branch "main"
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Tag snapshot
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.date.outputs.date }}-${{ github.event.client_payload.slash_command.args.named.image_version }}

      - name: Saving release tag for logbook
        id: release-tag
        run: |
          mkdir -p ./tmp/
          echo "${{ steps.date.outputs.date }}-${{ github.event.client_payload.slash_command.args.named.image_version }}"" > ./tmp/release-tag.txt

      - name: Upload release-tag
        id: upload-task-defition
        uses: actions/upload-artifact@v3
        with:
          name: tag-release
          path: ./tmp/tag-release.txt

  # swagger:
  #   name: swagger
  #   runs-on: ubuntu-latest
  #   environment: ${{ inputs.ENVIRONMENT }}
  #   if: needs.prepare.outputs.swagger == 'true'
  #   needs: [deploy, prepare]
  #   steps:
  #     - name: Download release asset
  #       uses: dawidd6/action-download-artifact@v2
  #       with:
  #         workflow: service-staging.yml
  #         github_token: ${{ secrets.PRIVATE_REPO_ACCESS }}
  #         workflow_conclusion: success
  #         branch: ${{ inputs.DEPLOY_PRO_BRANCH }}
  #         name: swagger_documentation
  #         path: ./docs

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-1

  #     - name: Rename swagger to service name
  #       shell: bash
  #       run: |
  #         mv ./docs/swagger.yaml ./docs/${{ inputs.REPOSITORY_NAME }}.yml

  #     - name: Push api doc to swagger bucket
  #       uses: jakejarvis/s3-sync-action@master
  #       with:
  #         args: --acl private --follow-symlinks
  #       env:
  #         AWS_S3_BUCKET: ${{ inputs.API_DOC_S3_BUCKET }}
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_REGION: eu-west-1
  #         SOURCE_DIR: ${{ inputs.DOC_PATH }}
  #         DEST_DIR: ${{ inputs.ENVIRONMENT }}

  #     - name: Invalidate old cache
  #       run: |
  #         aws cloudfront create-invalidation --distribution-id ${{ inputs.CLOUDFRONT_DISTRIBUTION_API }} --paths "/${{ inputs.ENVIRONMENT }}/*"

  notify:
    name: notify
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    if: ${{ always () }}
    needs: [prepare, deploy]
    steps:
      - name: Check outputs
        run: |
          echo ${{ needs.deploy.outputs.deployment_status}}
          echo "Slack Channel > ${{ needs.prepare.outputs.slack_channel }}"
          echo "Slack Data output > ${{ needs.prepare.outputs.slack_data }} "

      # Intentionally leaved there for references pourposes
      # - name: Check worfklow status
      # 	id: check_workflow_status
      # 	uses: LASER-Yi/workflow-status@v0.0.2
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     workflow: sandbox-staging.yml
      #     event: workflow_dispatch
      #     branch: ${{ inputs.BRANCH }}

      - name: Notify deployment ok
        if: needs.deploy.outputs.deployment_status == 'success'
        id: slack_notify_ok
        uses: archive/github-actions-slack@master
        with:
          slack-function: send-reaction
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_APP_BENDER_TOKEN }}
          slack-channel: ${{ fromJson(needs.prepare.outputs.slack_data).response.channel }}
          slack-emoji-name: thumbsup
          slack-message-timestamp: ${{ fromJson(needs.prepare.outputs.slack_data).response.message.ts }}

      - name: Notify deployment not ok
        if: needs.deploy.outputs.deployment_status != 'success'
        id: slack_notify_notok
        uses: archive/github-actions-slack@master
        with:
          slack-function: send-reaction
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_APP_BENDER_TOKEN }}
          slack-channel: ${{ fromJson(needs.prepare.outputs.slack_data).response.channel }}
          slack-emoji-name: elmofire
          slack-message-timestamp: ${{ fromJson(needs.prepare.outputs.slack_data).response.message.ts }}

  logbook:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    if: ${{ always () }}
    needs: [prepare, deploy]
    steps:
      - name: Get task-definition
        uses: actions/download-artifact@v3
        with:
          name: task-definition

      - name: Get release-tag
        uses: actions/download-artifact@v3
        with:
          name: release-tag

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Prepare SSM values
        shell: bash
        id: encode
        run: |
          ENCODED=$(cat ./task-definition.json | base64)
          REPOSITORY=$( echo ${{ github.repository }} | sed 's/${{ inputs.STRING_TO_DELETE }}//g' )
          TAG=$( cat ./tmp/release-tag.txt )
          echo TASK_DEF=$ENCODED >> $GITHUB_ENV
          echo SSM_PATH=$REPOSITORY >> $GITHUB_ENV
          echo RELEASE_TAG=$TAG >> $GITHUB_ENV

      - name: Upload base64 taskdef to SSM
        uses: joshghent/aws-ssm-parameter-store@v2.2.0
        with:
          ssm-path: ${{inputs.ENV}}/${{ env.SSM_PATH }}
          ssm-value: ${{ env.TASK_DEF }}
          aws-region: ${{ secrets.AWS_REGION }}
          ssm-value-type: "String"
          ssm-value-description: ${{ env.RELEASE_TAG }}
